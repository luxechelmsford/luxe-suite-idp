import {ErrorCodes, ErrorEx} from "../../types/errorEx";
import {CreateIdOption} from "../types/createIdOption";


/**
 * Class representing options for data store operations.
 */
export class FirebaseDataStoreOptions {
  /**
   * @private
   * Specifies how ID creation should be handled.
   */
  #createIdOption: CreateIdOption;

  /**
   * @private
   * Specifies if a new record should be createdAt if it does not already exist..
   */
  #createIfNotExists: boolean;

  /**
   * @private
   * Specifies if the update operation should be performed within a transaction.
   */
  #requireTransaction: boolean;

  /**
   * @private
   * Specifies if null and undefiend are allowed as values
   */
  #allowNullOrUndefined: boolean;

  /**
   * @private
   * Specifies readonly properties that cannot be changed during update
   */
  #readOnlyFields: string[];

  /**
   * @private
   * Specifies  acallback that can be called durinf transcational create and updates
   */
  #callback: ((id: string, applicationValueField: unknown) => Promise<void>) | null;

  /**
 * Creates an instance of the `FirebaseDataStoreOptions` class with optional configuration settings.
 *
 * The constructor accepts an optional object to configure various aspects of the
 * `FirebaseDataStoreOptions` instance. If any option is not provided, a default
 * value is used.
 *
 * @param {Object} [options={}] - An optional object containing configuration settings.
 * Default is an empty object, which then sets the default values for each option as defined below
 * @param {CreateIdOption} [options.createIdOption=CreateIdOption.AutoGeneratedId] - Configuration for ID creation.
 *                          Can be `CreateIdOption.AutoGeneratedId` or other  `CreateIdOption` values.
 *                          Defaults to AutoGeneratedId
 * @param {boolean} [options.requireTransaction=false] - Flag indicating whether updates should always happen within a transaction.
 *                          Defaults to `false`.
 * @param {boolean} [options.createIfNotExists=false] - Flag indicating whether a record should be createdAt if it does not already exist.
 *                          Defaults to `false`.
 * @param {boolean} [options.allowNullOrUndefined=false] - Flag indicating whether `null` or `undefined` values are allowed.
 *                          Defaults to `false`.
 *
 * @throws {ErrorEx} Throws an error if any invalid key is found in the `options` object.
 *
 * @example
 * // Creating an instance with all options
 * const instance = new FirebaseDataStoreOptions({
 *   createIdOption: CreateIdOption.AutoGeneratedId,
 *   requireTransaction: false,
 *   createIfNotExists: false,
 *   allowNullOrUndefined: false,
 * });
 *
 * @example
 * // Creating an instance with default options
 * const instance = new FirebaseDataStoreOptions();
 */
  constructor(options: {[key: string]: unknown} = {}) {
  // Process options
    for (const key in options) {
      if (Object.prototype.hasOwnProperty.call(options, key)) {
        console.debug(`Key: |${key}| & value: |${options[key]}| found.`);
      } else {
      // Handle properties that are inherited or not direct properties
        throw new ErrorEx(
          ErrorCodes.INVALID_PARAMETERS,
          `Invalid key |${key}| & value: |${options[key]}| pair found while parsing FirebaseDataStoreOptions.`,
        );
      }
    }

    // Assign default values or the provided options
    this.#createIdOption = (options.createIdOption ?? CreateIdOption.AutoGeneratedId) as CreateIdOption;
    this.#requireTransaction = !!options.requireTransaction;
    this.#createIfNotExists = !!options.createIfNotExists;
    this.#allowNullOrUndefined = !!options.allowNullOrUndefined;
    this.#readOnlyFields = (options.readOnlyFields) as string[] || [];
    this.#callback = (options.callback) as ((id: string, applicationValueField: unknown) => Promise<void>) || null;
  }

  /**
   * Gets the option indicating how ID conflicts are handled.
   * @return {CreateIdOption} - `AutoGeneratedId`, `ManualAllowIdConflicts`, or `ManualRejectIdConflicts`.
   */
  public get createIdOption(): CreateIdOption {
    return this.#createIdOption;
  }

  /**
   * Indicates whether a record should be createdAt if it does not already exist during an update operation.
   * @return {boolean} - True if the update operation is allowed to create a new record when it does not exist; false otherwise.
   */
  public get createIfNotExists(): boolean {
    return this.#createIfNotExists;
  }

  /**
  * Indicates whether the update operation must always be performed within a transaction.
  * @return {boolean} - True if the update operation must be executed inside a transaction; false otherwise.
  */
  public get requireTransaction(): boolean {
    return this.#requireTransaction;
  }

  /**
   * Gets option specifying if null or undefined values are allowed.
   * @return {boolean} - Options to specify if  null or undefined values are allowed.
   */
  public get allowNullOrUndefined(): boolean {
    return this.#allowNullOrUndefined;
  }

  /**
   * Gets option specifying any readonly properties that cannot be changed during update
   * @return {string[]} - a list of properties that are readonly for updates.
   */
  public get readOnlyFields(): string[] {
    return this.#readOnlyFields;
  }

  /**
   * Gets option specifying a callback that can be called durinf transcational create and updates
   * @return {string[]} - a callback that can be called durinf transcational create and updates
   */
  public get callback(): ((id: string, applicationValueField: unknown) => Promise<void>) | null {
    return this.#callback;
  }
}
